import React, {
  createContext,
  useContext,
  useEffect,
  useState,
  ReactNode,
  useCallback,
  useRef,
} from "react";
import { AuthContextType, UserType } from "@/types";
import { FirebaseAuthTypes } from "@react-native-firebase/auth";
import firebase, { auth, firestore } from "@/config/firebase";
import {
  onAuthStateChanged,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
} from "@react-native-firebase/auth";
import {
  doc,
  getDoc,
  setDoc,
  updateDoc,
  Unsubscribe,
  onSnapshot,
} from "@react-native-firebase/firestore";
import { router } from "expo-router";
import { useNotification } from "./notificationContext";

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<UserType>(null);
  const [isAuthLoading, setIsAuthLoading] = useState(true);
  const authListenerSetup = useRef(false);
  const { expoPushToken } = useNotification();

  //firestore Íµ¨ÎèÖÌï¥Ï†ú(Unsubscribe) Î≥¥Í¥ÄÌï®(Ref)
  const firestoreUnsubRef = useRef<Unsubscribe | null>(null);

  useEffect(() => {
    const authUnsub = onAuthStateChanged(
      auth,
      async (firebaseUser: FirebaseAuthTypes.User | null) => {
        console.log("Auth state changed:", firebaseUser?.uid || "null");

        if (firestoreUnsubRef.current) {
          // Ïù¥Ï†Ñ Firestore Î¶¨Ïä§ÎÑàÍ∞Ä ÏûàÏúºÎ©¥ Íµ¨ÎèÖ Ìï¥Ï†ú
          //ÎßåÏïΩ ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏ÏïÑÏõÉÌïòÎ©¥ onAuthStateChangedÍ∞Ä Ìò∏Ï∂úÎêòÍ≥†
          //Ïù¥Ï†Ñ Î¶¨Ïä§ÎÑàÎ•º Ìï¥Ï†úÌï¥ÏïºÌï®

          console.log("Unsubscribing from previous Firestore listener");
          firestoreUnsubRef.current(); // Ïù¥Ï†Ñ Firestore Î¶¨Ïä§ÎÑà Íµ¨ÎèÖ Ìï¥Ï†ú
          firestoreUnsubRef.current = null; // Ï∞∏Ï°∞ Ï¥àÍ∏∞Ìôî
        }
        if (firebaseUser) {
          const docRef = doc(firestore, "users", firebaseUser.uid);
          firestoreUnsubRef.current = onSnapshot(
            //onSnapshotÏùÄ Ï∫êÏãúÏö∞ÏÑ†Ï†ÑÎûµ ÏÇ¨Ïö©
            docRef,
            (docSnap) => {
              if (docSnap.exists()) {
                const data = docSnap.data();
                const isFromCache = docSnap.metadata.fromCache;
                console.log(
                  `User data loaded from ${
                    isFromCache ? "CACHE ‚úÖ" : "SERVER üåê"
                  }`
                );
                if (!data) {
                  console.log("Document exists but has no data");
                  setUser(null);
                  return;
                }
                const userData: UserType = {
                  uid: data.uid,
                  email: data.email || null,
                  name: data.name || null,
                  image: data.image || null,
                  price: data.price,
                  quantity: data.quantity,
                  lastUpdated: data.lastUpdated,
                  followersCount: data.followersCount || 0,
                  followingCount: data.followingCount || 0,
                  bio: data.bio || "",
                  isDarkMode: data.isDarkMode || false,
                  allowAlarm: data.allowAlarm || false,
                  duetime: data.duetime || "00:00",
                  words: data.words || "korean",
                  registerDate: data.registerDate || null,
                  expoPushToken: data.expoPushToken || null,
                };
                setUser(userData);
              } else {
                console.log("No user document found for this UID");
                setUser(null);
              }
              setIsAuthLoading(false);
            },
            (error) => {
              console.log("Error in onSnapshot listener:", error.message);
              setUser(null);
              setIsAuthLoading(false);
            }
          );
        } else {
          //Î°úÍ∑∏ÏïÑÏõÉ ÎòêÎäî ÏïÑÏßÅ Î°úÍ∑∏Ïù∏ ÏïàÎêú ÏÉÅÌÉú
          setUser(null);
          setIsAuthLoading(false);
        }
      }
    );
    // useEffect ÌÅ¥Î¶∞ÏóÖ: Auth Î¶¨Ïä§ÎÑàÏôÄ Firestore Î¶¨Ïä§ÎÑà Î™®Îëê Íµ¨ÎèÖ Ìï¥Ï†ú
    return () => {
      //Ïï±ÏùÑ ÏôÑÏ†ÑÌûà Ï¢ÖÎ£åÌï† ÎïåÎßå Ïã§ÌñâÎê®
      console.log("üßπ Cleaning up auth listener...");
      authUnsub();
      if (firestoreUnsubRef.current) {
        console.log("üßπ Cleaning up Firestore listener...");
        firestoreUnsubRef.current();
      }
    };
  }, []);

  // expoPushTokenÍ≥º DBÏùò ÌÜ†ÌÅ∞Ïù¥ Îã§Î•¥Î©¥ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const updatePushToken = async () => {
      if (!user || !expoPushToken) return;

      // DBÏùò ÌÜ†ÌÅ∞Í≥º ÌòÑÏû¨ ÌÜ†ÌÅ∞Ïù¥ Îã§Î•¥Î©¥ ÏóÖÎç∞Ïù¥Ìä∏
      if (user.expoPushToken !== expoPushToken) {
        try {
          const userRef = doc(firestore, "users", user.uid);
          await updateDoc(userRef, {
            expoPushToken: expoPushToken,
          });
          console.log("‚úÖ Push token updated successfully");
        } catch (error) {
          console.log("‚ùå Failed to update push token:", error);
        }
      }
    };

    updatePushToken();
  }, [expoPushToken, user?.uid]);

  const login = async (email: string, password: string) => {
    try {
      // ‚úÖ Modular APIÎ°ú Î°úÍ∑∏Ïù∏
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      router.replace("/(tabs)");
      return { success: true };
    } catch (error: any) {
      let msg = error.message;
      if (
        error.code === "auth/wrong-password" ||
        error.code === "auth/user-not-found" ||
        error.code === "auth/invalid-credential"
      )
        msg = "Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.";
      else if (error.code === "auth/invalid-email")
        msg = "Ïù¥Î©îÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.";
      return { success: false, msg };
    }
  };

  const register = async (email: string, password: string, name: string) => {
    try {
      // ‚úÖ Modular APIÎ°ú ÌöåÏõêÍ∞ÄÏûÖ
      const response = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );

      // ‚úÖ Modular APIÎ°ú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const userRef = doc(firestore, "users", response.user.uid);
      await setDoc(userRef, {
        name,
        email,
        uid: response.user.uid,
        image: null,
        price: 100,
        quantity: 1,
        lastUpdated: new Date().toISOString(),
        name_lower: name.toLowerCase(),
        followersCount: 0,
        followingCount: 0,
        bio: "",
        isDarkMode: false,
        allowAlarm: expoPushToken ? true : false,
        duetime: "00:00",
        words: "ÌïúÍµ≠Ïñ¥",
        registerDate: new Date().toISOString().split("T")[0],
        expoPushToken: expoPushToken || null,
        consecutiveNoTaskDays: 0,
      });
      router.replace("/(tabs)");
      return { success: true };
    } catch (error: any) {
      let msg = error.message;
      if (error.code === "auth/email-already-in-use")
        msg = "Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ Ïù¥Î©îÏùºÏûÖÎãàÎã§.";
      else if (error.code === "auth/invalid-email")
        msg = "Ïù¥Î©îÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.";
      return { success: false, msg };
    }
  };

  const changeUserStock = async (price: number) => {
    if (!user) return { success: false, msg: "User not logged in." };

    // üîÑ ÎÇôÍ¥ÄÏ†Å ÏóÖÎç∞Ïù¥Ìä∏: UIÎ•º Î®ºÏ†Ä ÏóÖÎç∞Ïù¥Ìä∏
    setUser({ ...user, price });

    // ‚úÖ Modular APIÎ°ú Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏
    const userRef = doc(firestore, "users", user.uid);
    try {
      // ÏÑúÎ≤ÑÏóê ÏóÖÎç∞Ïù¥Ìä∏ (Ïò§ÌîÑÎùºÏù∏ Ïãú ÏûêÎèôÏúºÎ°ú ÌÅêÏóê Ï†ÄÏû•ÎêòÍ≥† Ïò®ÎùºÏù∏ Ïãú Ïã§ÌñâÎê®)
      await updateDoc(userRef, { price });
      console.log("‚úÖ User stock updated successfully");
      return { success: true };
    } catch (error: any) {
      console.log("‚ùå Failed to update user stock:", error);

      // Ïã§Ìå® Ïãú ÏõêÎûò Í∞íÏúºÎ°ú Î°§Î∞±
      setUser(user);

      // Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÎùºÎ©¥ ÏÑ±Í≥µÏúºÎ°ú Ï≤òÎ¶¨ (ÎÇòÏ§ëÏóê ÎèôÍ∏∞ÌôîÎê®)
      if (error.code === "unavailable") {
        console.log("üì¥ Offline: Update will sync when online");
        setUser({ ...user, price }); // Îã§Ïãú ÏóÖÎç∞Ïù¥Ìä∏
        return {
          success: true,
          msg: "Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÏûÖÎãàÎã§. Ïò®ÎùºÏù∏ Ïãú ÏûêÎèô ÎèôÍ∏∞ÌôîÎê©ÎãàÎã§.",
        };
      }

      return { success: false, msg: "Ï£ºÏãù Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§." };
    }
  };

  const logout = async () => {
    try {
      // ‚úÖ Modular APIÎ°ú Î°úÍ∑∏ÏïÑÏõÉ
      await signOut(auth);
      router.replace("/(auth)/welcome");
    } catch (error) {
      console.log("‚ùå Logout Error: ", error);
    }
  };

  const contextValue: AuthContextType = {
    user,
    isAuthLoading,
    login,
    register,
    changeUserStock,
    logout,
  };

  return (
    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be wrapped inside AuthProvider");
  }
  return context;
};
