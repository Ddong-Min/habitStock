import React, {
  createContext,
  useContext,
  useEffect,
  useState,
  ReactNode,
  useCallback,
  useRef,
} from "react";
import { AuthContextType, UserType } from "@/types";
import { FirebaseAuthTypes } from "@react-native-firebase/auth";
import { auth, firestore } from "@/config/firebase";
import {
  onAuthStateChanged,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
} from "@react-native-firebase/auth";
import {
  doc,
  getDoc,
  setDoc,
  updateDoc,
} from "@react-native-firebase/firestore";
import { router } from "expo-router";
import { useNotification } from "./notificationContext";

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<UserType>(null);
  const [isAuthLoading, setIsAuthLoading] = useState(true);
  const authListenerSetup = useRef(false);
  const { expoPushToken, notification, error } = useNotification();

  const updateUserData = useCallback(async (uid: string) => {
    try {
      // ‚úÖ Modular APIÎ°ú Î¨∏ÏÑú Ï∞∏Ï°∞ ÏÉùÏÑ±
      const docRef = doc(firestore, "users", uid);

      // üìå Ï∫êÏãú Ïö∞ÏÑ† Ï†ÑÎûµ:
      // 1. Î®ºÏ†Ä Ï∫êÏãúÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¥ (Îπ†Î•∏ Î°úÎî©)
      // 2. Í∑∏ Îã§Ïùå ÏÑúÎ≤ÑÏóêÏÑú ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î•º ÌôïÏù∏
      // 3. Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÎ©¥ ÏûêÎèôÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Îê®
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        const data = docSnap.data();

        if (!data) {
          console.log("‚ö†Ô∏è Document exists but has no data");
          return;
        }

        // Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞Ïù∏ÏßÄ ÌôïÏù∏ (ÎîîÎ≤ÑÍπÖÏö©)
        const isFromCache = docSnap.metadata.fromCache;
        console.log(
          `üì¶ User data loaded from ${isFromCache ? "CACHE ‚úÖ" : "SERVER üåê"}`
        );

        const userData: UserType = {
          uid: data.uid,
          email: data.email || null,
          name: data.name || null,
          image: data.image || null,
          price: data.price,
          quantity: data.quantity,
          lastUpdated: data.lastUpdated,
          followersCount: data.followersCount || 0,
          followingCount: data.followingCount || 0,
          bio: data.bio || "",
          isDarkMode: data.isDarkMode || false,
          allowAlarm: data.allowAlarm || false,
          duetime: data.duetime || "00:00",
          words: data.words || "korean",
          registerDate: data.registerDate || null,
        };

        setUser(userData);
      }
    } catch (error: any) {
      console.log("‚ùå Error fetching user data:", error.message);

      // Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÏóêÏÑúÎèÑ Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©ÌïòÎ†§Í≥† ÏãúÎèÑ
      if (error.code === "unavailable") {
        console.log("üì¥ Device is offline, trying to use cached data");
        try {
          const docRef = doc(firestore, "users", uid);
          const docSnap = await getDoc(docRef);

          if (docSnap.exists()) {
            const data = docSnap.data();

            if (!data) {
              console.log("‚ö†Ô∏è Cached document exists but has no data");
              return;
            }

            const userData: UserType = {
              uid: data.uid,
              email: data.email || null,
              name: data.name || null,
              image: data.image || null,
              price: data.price,
              quantity: data.quantity,
              lastUpdated: data.lastUpdated,
              followersCount: data.followersCount || 0,
              followingCount: data.followingCount || 0,
              bio: data.bio || "",
              isDarkMode: data.isDarkMode || false,
              allowAlarm: data.allowAlarm || false,
              duetime: data.duetime || "00:00",
              words: data.words || "korean",
              registerDate: data.registerDate || null,
            };
            console.log("‚úÖ Successfully loaded user data from cache");
            setUser(userData);
          }
        } catch (cacheError: any) {
          console.log("‚ùå No cached data available:", cacheError.message);
        }
      }
    }
  }, []);

  useEffect(() => {
    if (authListenerSetup.current) return;
    console.log("üîß Setting up auth listener...");
    authListenerSetup.current = true;

    // ‚úÖ Modular APIÎ°ú Auth ÏÉÅÌÉú Í∞êÏßÄ
    const unsub = onAuthStateChanged(
      auth,
      async (firebaseUser: FirebaseAuthTypes.User | null) => {
        console.log("üîê Auth State Changed:", firebaseUser?.uid || "null");

        if (firebaseUser) {
          await updateUserData(firebaseUser.uid);
        } else {
          setUser(null);
        }
        setIsAuthLoading(false);
      }
    );

    return () => {
      console.log("üßπ Cleaning up auth listener");
      authListenerSetup.current = false;
      unsub();
    };
  }, [updateUserData]);

  const login = async (email: string, password: string) => {
    try {
      // ‚úÖ Modular APIÎ°ú Î°úÍ∑∏Ïù∏
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      await updateUserData(userCredential.user.uid);
      router.replace("/(tabs)");
      return { success: true };
    } catch (error: any) {
      let msg = error.message;
      if (
        error.code === "auth/wrong-password" ||
        error.code === "auth/user-not-found" ||
        error.code === "auth/invalid-credential"
      )
        msg = "Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.";
      else if (error.code === "auth/invalid-email")
        msg = "Ïù¥Î©îÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.";
      return { success: false, msg };
    }
  };

  const register = async (email: string, password: string, name: string) => {
    try {
      // ‚úÖ Modular APIÎ°ú ÌöåÏõêÍ∞ÄÏûÖ
      const response = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );

      // ‚úÖ Modular APIÎ°ú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const userRef = doc(firestore, "users", response.user.uid);
      await setDoc(userRef, {
        name,
        email,
        uid: response.user.uid,
        image: null,
        price: 100,
        quantity: 1,
        lastUpdated: new Date().toISOString(),
        name_lower: name.toLowerCase(),
        followersCount: 0,
        followingCount: 0,
        bio: "",
        isDarkMode: false,
        allowAlarm: expoPushToken ? true : false,
        duetime: "00:00",
        words: "ÌïúÍµ≠Ïñ¥",
        registerDate: new Date().toISOString().split("T")[0],
        expoPushToken: expoPushToken || null,
        consecutiveNoTaskDays: 0,
      });

      await updateUserData(response.user.uid);
      router.replace("/(tabs)");
      return { success: true };
    } catch (error: any) {
      let msg = error.message;
      if (error.code === "auth/email-already-in-use")
        msg = "Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ Ïù¥Î©îÏùºÏûÖÎãàÎã§.";
      else if (error.code === "auth/invalid-email")
        msg = "Ïù¥Î©îÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.";
      return { success: false, msg };
    }
  };

  const changeUserStock = async (price: number) => {
    if (!user) return { success: false, msg: "User not logged in." };

    // üîÑ ÎÇôÍ¥ÄÏ†Å ÏóÖÎç∞Ïù¥Ìä∏: UIÎ•º Î®ºÏ†Ä ÏóÖÎç∞Ïù¥Ìä∏
    setUser({ ...user, price });

    // ‚úÖ Modular APIÎ°ú Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏
    const userRef = doc(firestore, "users", user.uid);
    try {
      // ÏÑúÎ≤ÑÏóê ÏóÖÎç∞Ïù¥Ìä∏ (Ïò§ÌîÑÎùºÏù∏ Ïãú ÏûêÎèôÏúºÎ°ú ÌÅêÏóê Ï†ÄÏû•ÎêòÍ≥† Ïò®ÎùºÏù∏ Ïãú Ïã§ÌñâÎê®)
      await updateDoc(userRef, { price });
      console.log("‚úÖ User stock updated successfully");
      return { success: true };
    } catch (error: any) {
      console.log("‚ùå Failed to update user stock:", error);

      // Ïã§Ìå® Ïãú ÏõêÎûò Í∞íÏúºÎ°ú Î°§Î∞±
      setUser(user);

      // Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÎùºÎ©¥ ÏÑ±Í≥µÏúºÎ°ú Ï≤òÎ¶¨ (ÎÇòÏ§ëÏóê ÎèôÍ∏∞ÌôîÎê®)
      if (error.code === "unavailable") {
        console.log("üì¥ Offline: Update will sync when online");
        setUser({ ...user, price }); // Îã§Ïãú ÏóÖÎç∞Ïù¥Ìä∏
        return {
          success: true,
          msg: "Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÏûÖÎãàÎã§. Ïò®ÎùºÏù∏ Ïãú ÏûêÎèô ÎèôÍ∏∞ÌôîÎê©ÎãàÎã§.",
        };
      }

      return { success: false, msg: "Ï£ºÏãù Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§." };
    }
  };

  const logout = async () => {
    try {
      // ‚úÖ Modular APIÎ°ú Î°úÍ∑∏ÏïÑÏõÉ
      await signOut(auth);
      router.replace("/(auth)/welcome");
    } catch (error) {
      console.log("‚ùå Logout Error: ", error);
    }
  };

  const contextValue: AuthContextType = {
    user,
    isAuthLoading,
    login,
    register,
    updateUserData,
    changeUserStock,
    logout,
  };

  return (
    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be wrapped inside AuthProvider");
  }
  return context;
};
